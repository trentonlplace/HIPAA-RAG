{
  "$schema": "https://schema.management.azure.com/schemas/2021-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "description": "[PHI] HIPAA-Compliant Azure Key Vault Configuration Template",
    "classification": "PHI-CRITICAL",
    "author": "HIPAA Security Team",
    "version": "1.0.0",
    "lastUpdated": "2025-08-01"
  },
  "parameters": {
    "environmentName": {
      "type": "string",
      "metadata": {
        "description": "Environment name for resource naming"
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Azure region for deployment"
      }
    },
    "resourceToken": {
      "type": "string",
      "metadata": {
        "description": "Unique token for resource naming"
      }
    },
    "principalId": {
      "type": "string",
      "metadata": {
        "description": "Principal ID for Key Vault access policies"
      }
    },
    "hipaaSecurityOfficerId": {
      "type": "string",
      "metadata": {
        "description": "Principal ID of the HIPAA Security Officer"
      }
    },
    "enablePrivateEndpoint": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Enable private endpoint for Key Vault"
      }
    },
    "virtualNetworkResourceId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Resource ID of the virtual network for private endpoint"
      }
    },
    "privateEndpointSubnetResourceId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Resource ID of the subnet for private endpoint"
      }
    }
  },
  "variables": {
    "resourcePrefix": "[concat('hipaa-rag-', parameters('resourceToken'))]",
    "tags": {
      "Environment": "[parameters('environmentName')]",
      "Compliance": "HIPAA",
      "DataClassification": "PHI-Keys",
      "SecurityLevel": "Critical",
      "Owner": "HIPAA-Security-Team",
      "Purpose": "PHI-Encryption-Keys"
    },
    "keyVaultName": "[concat('kv-', parameters('resourceToken'))]",
    "privateEndpointName": "[concat('pe-', variables('keyVaultName'))]",
    "privateDnsZoneName": "privatelink.vaultcore.azure.net",
    "privateDnsZoneGroupName": "default",
    "keyRotationPolicyName": "default-rotation-policy"
  },
  "resources": [
    {
      "type": "Microsoft.KeyVault/vaults",
      "apiVersion": "2022-07-01",
      "name": "[variables('keyVaultName')]",
      "location": "[parameters('location')]",
      "tags": "[variables('tags')]",
      "properties": {
        "sku": {
          "family": "A",
          "name": "premium"
        },
        "tenantId": "[subscription().tenantId]",
        "enabledForDeployment": false,
        "enabledForDiskEncryption": true,
        "enabledForTemplateDeployment": true,
        "enableSoftDelete": true,
        "softDeleteRetentionInDays": 90,
        "enablePurgeProtection": true,
        "enableRbacAuthorization": true,
        "publicNetworkAccess": "[if(parameters('enablePrivateEndpoint'), 'Disabled', 'Enabled')]",
        "networkAcls": {
          "bypass": "AzureServices",
          "defaultAction": "Deny",
          "ipRules": [],
          "virtualNetworkRules": []
        },
        "createMode": "default"
      }
    },
    {
      "type": "Microsoft.KeyVault/vaults/keys",
      "apiVersion": "2022-07-01",
      "name": "[concat(variables('keyVaultName'), '/storage-encryption-key')]",
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]"
      ],
      "properties": {
        "kty": "RSA",
        "keySize": 4096,
        "keyOps": [
          "encrypt",
          "decrypt",
          "wrapKey",
          "unwrapKey"
        ],
        "attributes": {
          "enabled": true,
          "exportable": false
        },
        "rotationPolicy": {
          "lifetimeActions": [
            {
              "trigger": {
                "timeBeforeExpiry": "P30D"
              },
              "action": {
                "type": "Rotate"
              }
            },
            {
              "trigger": {
                "timeAfterCreate": "P90D"
              },
              "action": {
                "type": "Notify"
              }
            }
          ],
          "attributes": {
            "expiryTime": "P1Y"
          }
        }
      }
    },
    {
      "type": "Microsoft.KeyVault/vaults/keys",
      "apiVersion": "2022-07-01",
      "name": "[concat(variables('keyVaultName'), '/database-encryption-key')]",
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]"
      ],
      "properties": {
        "kty": "RSA",
        "keySize": 4096,
        "keyOps": [
          "encrypt",
          "decrypt",
          "wrapKey",
          "unwrapKey"
        ],
        "attributes": {
          "enabled": true,
          "exportable": false
        },
        "rotationPolicy": {
          "lifetimeActions": [
            {
              "trigger": {
                "timeBeforeExpiry": "P30D"
              },
              "action": {
                "type": "Rotate"
              }
            },
            {
              "trigger": {
                "timeAfterCreate": "P90D"
              },
              "action": {
                "type": "Notify"
              }
            }
          ],
          "attributes": {
            "expiryTime": "P1Y"
          }
        }
      }
    },
    {
      "type": "Microsoft.KeyVault/vaults/keys",
      "apiVersion": "2022-07-01",
      "name": "[concat(variables('keyVaultName'), '/application-encryption-key')]",
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]"
      ],
      "properties": {
        "kty": "RSA",
        "keySize": 4096,
        "keyOps": [
          "encrypt",
          "decrypt",
          "sign",
          "verify"
        ],
        "attributes": {
          "enabled": true,
          "exportable": false
        },
        "rotationPolicy": {
          "lifetimeActions": [
            {
              "trigger": {
                "timeBeforeExpiry": "P30D"
              },
              "action": {
                "type": "Rotate"
              }
            }
          ],
          "attributes": {
            "expiryTime": "P6M"
          }
        }
      }
    },
    {
      "type": "Microsoft.KeyVault/vaults/secrets",
      "apiVersion": "2022-07-01",
      "name": "[concat(variables('keyVaultName'), '/hipaa-compliance-certificate')]",
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]"
      ],
      "properties": {
        "value": "HIPAA-RAG-COMPLIANT-2025",
        "attributes": {
          "enabled": true
        },
        "contentType": "text/plain"
      }
    },
    {
      "condition": "[parameters('enablePrivateEndpoint')]",
      "type": "Microsoft.Network/privateDnsZones",
      "apiVersion": "2020-06-01",
      "name": "[variables('privateDnsZoneName')]",
      "location": "global",
      "tags": "[variables('tags')]"
    },
    {
      "condition": "[parameters('enablePrivateEndpoint')]",
      "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
      "apiVersion": "2020-06-01",
      "name": "[concat(variables('privateDnsZoneName'), '/', uniqueString(parameters('virtualNetworkResourceId')))]",
      "location": "global",
      "dependsOn": [
        "[resourceId('Microsoft.Network/privateDnsZones', variables('privateDnsZoneName'))]"
      ],
      "properties": {
        "registrationEnabled": false,
        "virtualNetwork": {
          "id": "[parameters('virtualNetworkResourceId')]"
        }
      }
    },
    {
      "condition": "[parameters('enablePrivateEndpoint')]",
      "type": "Microsoft.Network/privateEndpoints",
      "apiVersion": "2022-07-01",
      "name": "[variables('privateEndpointName')]",
      "location": "[parameters('location')]",
      "tags": "[variables('tags')]",
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]"
      ],
      "properties": {
        "subnet": {
          "id": "[parameters('privateEndpointSubnetResourceId')]"
        },
        "privateLinkServiceConnections": [
          {
            "name": "keyvault-connection",
            "properties": {
              "privateLinkServiceId": "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]",
              "groupIds": [
                "vault"
              ]
            }
          }
        ]
      }
    },
    {
      "condition": "[parameters('enablePrivateEndpoint')]",
      "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
      "apiVersion": "2022-07-01",
      "name": "[concat(variables('privateEndpointName'), '/', variables('privateDnsZoneGroupName'))]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/privateEndpoints', variables('privateEndpointName'))]",
        "[resourceId('Microsoft.Network/privateDnsZones', variables('privateDnsZoneName'))]"
      ],
      "properties": {
        "privateDnsZoneConfigs": [
          {
            "name": "keyvault-config",
            "properties": {
              "privateDnsZoneId": "[resourceId('Microsoft.Network/privateDnsZones', variables('privateDnsZoneName'))]"
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.Authorization/roleAssignments",
      "apiVersion": "2022-04-01",
      "name": "[guid(resourceGroup().id, parameters('principalId'), 'Key Vault Crypto Officer')]",
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]"
      ],
      "properties": {
        "roleDefinitionId": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/14b46e9e-c2b7-41b4-b07b-48a6ebf60603')]",
        "principalId": "[parameters('principalId')]",
        "principalType": "User",
        "scope": "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]"
      }
    },
    {
      "type": "Microsoft.Authorization/roleAssignments",
      "apiVersion": "2022-04-01",
      "name": "[guid(resourceGroup().id, parameters('hipaaSecurityOfficerId'), 'Key Vault Administrator')]",
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]"
      ],
      "properties": {
        "roleDefinitionId": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/00482a5a-887f-4fb3-b363-3b7fe8e74483')]",
        "principalId": "[parameters('hipaaSecurityOfficerId')]",
        "principalType": "User",
        "scope": "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]"
      }
    },
    {
      "type": "Microsoft.KeyVault/vaults/providers/diagnosticSettings",
      "apiVersion": "2021-05-01-preview",
      "name": "[concat(variables('keyVaultName'), '/Microsoft.Insights/audit-logs')]",
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]"
      ],
      "properties": {
        "logs": [
          {
            "category": "AuditEvent",
            "enabled": true,
            "retentionPolicy": {
              "days": 2555,
              "enabled": true
            }
          },
          {
            "category": "AzurePolicyEvaluationDetails",
            "enabled": true,
            "retentionPolicy": {
              "days": 2555,
              "enabled": true
            }
          }
        ],
        "metrics": [
          {
            "category": "AllMetrics",
            "enabled": true,
            "retentionPolicy": {
              "days": 90,
              "enabled": true
            }
          }
        ]
      }
    }
  ],
  "outputs": {
    "keyVaultName": {
      "type": "string",
      "value": "[variables('keyVaultName')]"
    },
    "keyVaultResourceId": {
      "type": "string",
      "value": "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]"
    },
    "keyVaultUri": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))).vaultUri]"
    },
    "storageEncryptionKeyUri": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.KeyVault/vaults/keys', variables('keyVaultName'), 'storage-encryption-key')).keyUri]"
    },
    "databaseEncryptionKeyUri": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.KeyVault/vaults/keys', variables('keyVaultName'), 'database-encryption-key')).keyUri]"
    },
    "applicationEncryptionKeyUri": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.KeyVault/vaults/keys', variables('keyVaultName'), 'application-encryption-key')).keyUri]"
    },
    "privateEndpointEnabled": {
      "type": "bool",
      "value": "[parameters('enablePrivateEndpoint')]"
    },
    "keyVaultConfiguration": {
      "type": "object",
      "value": {
        "sku": "Premium",
        "softDeleteEnabled": true,
        "purgeProtectionEnabled": true,
        "rbacEnabled": true,
        "publicNetworkAccess": "[if(parameters('enablePrivateEndpoint'), 'Disabled', 'Enabled')]",
        "privateEndpointEnabled": "[parameters('enablePrivateEndpoint')]",
        "keyRotationEnabled": true,
        "auditLoggingEnabled": true,
        "complianceLevel": "HIPAA-Compliant"
      }
    }
  }
}