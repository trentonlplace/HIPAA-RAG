{
  "$schema": "https://schema.management.azure.com/schemas/2021-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "description": "[PHI] HIPAA-Compliant RAG System Infrastructure Template",
    "classification": "PHI-CRITICAL",
    "author": "HIPAA Compliance Team",
    "version": "1.0.0",
    "lastUpdated": "2025-08-01"
  },
  "parameters": {
    "environmentName": {
      "type": "string",
      "minLength": 1,
      "maxLength": 20,
      "metadata": {
        "description": "Name of the environment for HIPAA-compliant deployment"
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "allowedValues": [
        "eastus",
        "eastus2",
        "westus2",
        "centralus",
        "northcentralus",
        "southcentralus"
      ],
      "metadata": {
        "description": "Azure region for deployment (HIPAA-compliant regions only)"
      }
    },
    "resourceToken": {
      "type": "string",
      "defaultValue": "[toLower(uniqueString(subscription().id, parameters('environmentName'), parameters('location')))]",
      "metadata": {
        "description": "Unique token for resource naming"
      }
    },
    "principalId": {
      "type": "string",
      "metadata": {
        "description": "Principal ID of the user or service principal for RBAC assignments"
      }
    },
    "hipaaSecurityOfficerId": {
      "type": "string",
      "metadata": {
        "description": "Principal ID of the designated HIPAA Security Officer"
      }
    },
    "databaseType": {
      "type": "string",
      "defaultValue": "PostgreSQL",
      "allowedValues": [
        "PostgreSQL",
        "CosmosDB"
      ],
      "metadata": {
        "description": "Database type for PHI storage"
      }
    },
    "enablePrivateEndpoints": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Enable private endpoints for network isolation (required for HIPAA)"
      }
    },
    "enableCustomerManagedKeys": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Enable customer-managed encryption keys (required for HIPAA)"
      }
    },
    "logRetentionDays": {
      "type": "int",
      "defaultValue": 2555,
      "minValue": 2555,
      "metadata": {
        "description": "Log retention in days (minimum 7 years for HIPAA compliance)"
      }
    },
    "backupRetentionDays": {
      "type": "int",
      "defaultValue": 35,
      "minValue": 35,
      "metadata": {
        "description": "Backup retention in days (minimum 35 days for HIPAA compliance)"
      }
    }
  },
  "variables": {
    "resourcePrefix": "[concat('hipaa-rag-', parameters('resourceToken'))]",
    "tags": {
      "Environment": "[parameters('environmentName')]",
      "Compliance": "HIPAA",
      "DataClassification": "PHI",
      "Owner": "HIPAA-Security-Team",
      "CostCenter": "Security-Compliance",
      "LastReviewed": "2025-08-01",
      "TemplateName": "HIPAA-RAG"
    },
    "networkSecurityGroupName": "[concat('nsg-', variables('resourcePrefix'))]",
    "virtualNetworkName": "[concat('vnet-', variables('resourcePrefix'))]",
    "keyVaultName": "[concat('kv-', parameters('resourceToken'))]",
    "logAnalyticsWorkspaceName": "[concat('log-', variables('resourcePrefix'))]",
    "applicationInsightsName": "[concat('appi-', variables('resourcePrefix'))]",
    "storageAccountName": "[concat('st', replace(parameters('resourceToken'), '-', ''))]",
    "cosmosDbAccountName": "[concat('cosmos-', variables('resourcePrefix'))]",
    "postgresqlServerName": "[concat('psql-', variables('resourcePrefix'))]",
    "searchServiceName": "[concat('srch-', variables('resourcePrefix'))]",
    "openAiServiceName": "[concat('oai-', variables('resourcePrefix'))]",
    "appServicePlanName": "[concat('asp-', variables('resourcePrefix'))]",
    "functionAppName": "[concat('func-', variables('resourcePrefix'))]",
    "webAppName": "[concat('app-', variables('resourcePrefix'))]",
    "adminWebAppName": "[concat(variables('webAppName'), '-admin')]",
    "privateEndpointSubnetName": "private-endpoints",
    "appServiceSubnetName": "app-services",
    "databaseSubnetName": "databases"
  },
  "resources": [
    {
      "type": "Microsoft.Network/networkSecurityGroups",
      "apiVersion": "2021-02-01",
      "name": "[variables('networkSecurityGroupName')]",
      "location": "[parameters('location')]",
      "tags": "[variables('tags')]",
      "properties": {
        "securityRules": [
          {
            "name": "AllowHTTPS",
            "properties": {
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "destinationPortRange": "443",
              "sourceAddressPrefix": "*",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 100,
              "direction": "Inbound"
            }
          },
          {
            "name": "DenyAllHTTP",
            "properties": {
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "destinationPortRange": "80",
              "sourceAddressPrefix": "*",
              "destinationAddressPrefix": "*",
              "access": "Deny",
              "priority": 110,
              "direction": "Inbound"
            }
          },
          {
            "name": "DenyAllInbound",
            "properties": {
              "protocol": "*",
              "sourcePortRange": "*",
              "destinationPortRange": "*",
              "sourceAddressPrefix": "*",
              "destinationAddressPrefix": "*",
              "access": "Deny",
              "priority": 4096,
              "direction": "Inbound"
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.Network/virtualNetworks",
      "apiVersion": "2021-02-01",
      "name": "[variables('virtualNetworkName')]",
      "location": "[parameters('location')]",
      "tags": "[variables('tags')]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/networkSecurityGroups', variables('networkSecurityGroupName'))]"
      ],
      "properties": {
        "addressSpace": {
          "addressPrefixes": [
            "10.0.0.0/16"
          ]
        },
        "subnets": [
          {
            "name": "[variables('privateEndpointSubnetName')]",
            "properties": {
              "addressPrefix": "10.0.1.0/24",
              "networkSecurityGroup": {
                "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('networkSecurityGroupName'))]"
              },
              "privateEndpointNetworkPolicies": "Disabled"
            }
          },
          {
            "name": "[variables('appServiceSubnetName')]",
            "properties": {
              "addressPrefix": "10.0.2.0/24",
              "networkSecurityGroup": {
                "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('networkSecurityGroupName'))]"
              },
              "delegations": [
                {
                  "name": "Microsoft.Web/serverFarms",
                  "properties": {
                    "serviceName": "Microsoft.Web/serverFarms"
                  }
                }
              ]
            }
          },
          {
            "name": "[variables('databaseSubnetName')]",
            "properties": {
              "addressPrefix": "10.0.3.0/24",
              "networkSecurityGroup": {
                "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('networkSecurityGroupName'))]"
              }
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces",
      "apiVersion": "2021-12-01-preview",
      "name": "[variables('logAnalyticsWorkspaceName')]",
      "location": "[parameters('location')]",
      "tags": "[variables('tags')]",
      "properties": {
        "sku": {
          "name": "PerGB2018"
        },
        "retentionInDays": "[parameters('logRetentionDays')]",
        "features": {
          "enableLogAccessUsingOnlyResourcePermissions": true
        },
        "publicNetworkAccessForIngestion": "Disabled",
        "publicNetworkAccessForQuery": "Disabled"
      }
    },
    {
      "type": "Microsoft.Insights/components",
      "apiVersion": "2020-02-02",
      "name": "[variables('applicationInsightsName')]",
      "location": "[parameters('location')]",
      "tags": "[variables('tags')]",
      "kind": "web",
      "dependsOn": [
        "[resourceId('Microsoft.OperationalInsights/workspaces', variables('logAnalyticsWorkspaceName'))]"
      ],
      "properties": {
        "Application_Type": "web",
        "WorkspaceResourceId": "[resourceId('Microsoft.OperationalInsights/workspaces', variables('logAnalyticsWorkspaceName'))]",
        "IngestionMode": "LogAnalytics",
        "publicNetworkAccessForIngestion": "Disabled",
        "publicNetworkAccessForQuery": "Disabled"
      }
    },
    {
      "type": "Microsoft.KeyVault/vaults",
      "apiVersion": "2021-11-01-preview",
      "name": "[variables('keyVaultName')]",
      "location": "[parameters('location')]",
      "tags": "[variables('tags')]",
      "properties": {
        "sku": {
          "family": "A",
          "name": "premium"
        },
        "tenantId": "[subscription().tenantId]",
        "enabledForDeployment": false,
        "enabledForDiskEncryption": true,
        "enabledForTemplateDeployment": true,
        "enableSoftDelete": true,
        "softDeleteRetentionInDays": 90,
        "enablePurgeProtection": true,
        "enableRbacAuthorization": true,
        "publicNetworkAccess": "Disabled",
        "networkAcls": {
          "bypass": "AzureServices",
          "defaultAction": "Deny"
        }
      }
    },
    {
      "condition": "[parameters('enableCustomerManagedKeys')]",
      "type": "Microsoft.KeyVault/vaults/keys",
      "apiVersion": "2021-11-01-preview",
      "name": "[concat(variables('keyVaultName'), '/storage-cmk')]",
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]"
      ],
      "properties": {
        "kty": "RSA",
        "keySize": 2048,
        "keyOps": [
          "encrypt",
          "decrypt",
          "wrapKey",
          "unwrapKey"
        ]
      }
    },
    {
      "condition": "[parameters('enableCustomerManagedKeys')]",
      "type": "Microsoft.KeyVault/vaults/keys",
      "apiVersion": "2021-11-01-preview",
      "name": "[concat(variables('keyVaultName'), '/database-cmk')]",
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]"
      ],
      "properties": {
        "kty": "RSA",
        "keySize": 2048,
        "keyOps": [
          "encrypt",
          "decrypt",
          "wrapKey",
          "unwrapKey"
        ]
      }
    },
    {
      "type": "Microsoft.Storage/storageAccounts",
      "apiVersion": "2021-09-01",
      "name": "[variables('storageAccountName')]",
      "location": "[parameters('location')]",
      "tags": "[variables('tags')]",
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults/keys', variables('keyVaultName'), 'storage-cmk')]"
      ],
      "sku": {
        "name": "Standard_GRS"
      },
      "kind": "StorageV2",
      "identity": {
        "type": "SystemAssigned"
      },
      "properties": {
        "supportsHttpsTrafficOnly": true,
        "minimumTlsVersion": "TLS1_2",
        "allowBlobPublicAccess": false,
        "allowSharedKeyAccess": false,
        "defaultToOAuthAuthentication": true,
        "publicNetworkAccess": "[if(parameters('enablePrivateEndpoints'), 'Disabled', 'Enabled')]",
        "encryption": {
          "requireInfrastructureEncryption": true,
          "keySource": "[if(parameters('enableCustomerManagedKeys'), 'Microsoft.Keyvault', 'Microsoft.Storage')]",
          "keyvaultproperties": "[if(parameters('enableCustomerManagedKeys'), json(concat('{\"keyname\":\"storage-cmk\",\"keyvaulturi\":\"', reference(resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))).vaultUri, '\"}')), json('null'))]",
          "services": {
            "blob": {
              "enabled": true,
              "keyType": "Account"
            },
            "file": {
              "enabled": true,
              "keyType": "Account"
            },
            "queue": {
              "enabled": true,
              "keyType": "Service"
            },
            "table": {
              "enabled": true,
              "keyType": "Service"
            }
          }
        },
        "networkAcls": {
          "bypass": "AzureServices",
          "defaultAction": "[if(parameters('enablePrivateEndpoints'), 'Deny', 'Allow')]"
        }
      }
    },
    {
      "type": "Microsoft.Storage/storageAccounts/blobServices",
      "apiVersion": "2021-09-01",
      "name": "[concat(variables('storageAccountName'), '/default')]",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]"
      ],
      "properties": {
        "deleteRetentionPolicy": {
          "enabled": true,
          "days": "[parameters('backupRetentionDays')]"
        },
        "containerDeleteRetentionPolicy": {
          "enabled": true,
          "days": "[parameters('backupRetentionDays')]"
        },
        "versioning": {
          "enabled": true
        },
        "changeFeed": {
          "enabled": true,
          "retentionInDays": 90
        }
      }
    },
    {
      "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
      "apiVersion": "2021-09-01",
      "name": "[concat(variables('storageAccountName'), '/default/documents')]",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts/blobServices', variables('storageAccountName'), 'default')]"
      ],
      "properties": {
        "publicAccess": "None",
        "metadata": {
          "dataClassification": "PHI",
          "compliance": "HIPAA"
        }
      }
    },
    {
      "condition": "[and(equals(parameters('databaseType'), 'CosmosDB'), parameters('enableCustomerManagedKeys'))]",
      "type": "Microsoft.DocumentDB/databaseAccounts",
      "apiVersion": "2021-10-15",
      "name": "[variables('cosmosDbAccountName')]",
      "location": "[parameters('location')]",
      "tags": "[variables('tags')]",
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults/keys', variables('keyVaultName'), 'database-cmk')]"
      ],
      "kind": "GlobalDocumentDB",
      "identity": {
        "type": "SystemAssigned"
      },
      "properties": {
        "consistencyPolicy": {
          "defaultConsistencyLevel": "Session"
        },
        "locations": [
          {
            "locationName": "[parameters('location')]",
            "failoverPriority": 0,
            "isZoneRedundant": true
          }
        ],
        "databaseAccountOfferType": "Standard",
        "enableAutomaticFailover": true,
        "enableMultipleWriteLocations": false,
        "publicNetworkAccess": "[if(parameters('enablePrivateEndpoints'), 'Disabled', 'Enabled')]",
        "disableKeyBasedMetadataWriteAccess": true,
        "keyVaultKeyUri": "[if(parameters('enableCustomerManagedKeys'), concat(reference(resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))).vaultUri, 'keys/database-cmk'), '')]",
        "backupPolicy": {
          "type": "Continuous"
        },
        "networkAclBypass": "AzureServices",
        "networkAclBypassResourceIds": []
      }
    },
    {
      "condition": "[equals(parameters('databaseType'), 'PostgreSQL')]",
      "type": "Microsoft.DBforPostgreSQL/flexibleServers",
      "apiVersion": "2021-06-01",
      "name": "[variables('postgresqlServerName')]",
      "location": "[parameters('location')]",
      "tags": "[variables('tags')]",
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults/keys', variables('keyVaultName'), 'database-cmk')]"
      ],
      "sku": {
        "name": "Standard_D2s_v3",
        "tier": "GeneralPurpose"
      },
      "identity": {
        "type": "SystemAssigned"
      },
      "properties": {
        "version": "13",
        "administratorLogin": "hipaa_admin",
        "administratorLoginPassword": "[concat('P@ssw0rd', parameters('resourceToken'))]",
        "storage": {
          "storageSizeGB": 512
        },
        "backup": {
          "backupRetentionDays": "[parameters('backupRetentionDays')]",
          "geoRedundantBackup": "Enabled"
        },
        "network": {
          "publicNetworkAccess": "[if(parameters('enablePrivateEndpoints'), 'Disabled', 'Enabled')]"
        },
        "highAvailability": {
          "mode": "ZoneRedundant"
        },
        "dataEncryption": "[if(parameters('enableCustomerManagedKeys'), json(concat('{\"type\":\"AzureKeyVault\",\"primaryKeyURI\":\"', reference(resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))).vaultUri, 'keys/database-cmk\",\"primaryUserAssignedIdentityId\":null}')), json('{\"type\":\"SystemManaged\"}'))]"
      }
    },
    {
      "type": "Microsoft.Search/searchServices",
      "apiVersion": "2021-04-01-preview",
      "name": "[variables('searchServiceName')]",
      "location": "[parameters('location')]",
      "tags": "[variables('tags')]",
      "sku": {
        "name": "standard"
      },
      "identity": {
        "type": "SystemAssigned"
      },
      "properties": {
        "replicaCount": 3,
        "partitionCount": 1,
        "hostingMode": "default",
        "publicNetworkAccess": "[if(parameters('enablePrivateEndpoints'), 'disabled', 'enabled')]",
        "networkRuleSet": {
          "ipRules": []
        },
        "encryptionWithCmk": {
          "enforcement": "[if(parameters('enableCustomerManagedKeys'), 'Enabled', 'Disabled')]"
        },
        "disableLocalAuth": true,
        "authOptions": {
          "aadOrApiKey": {
            "aadAuthFailureMode": "http403"
          }
        },
        "semanticSearch": "free"
      }
    },
    {
      "type": "Microsoft.CognitiveServices/accounts",
      "apiVersion": "2021-10-01",
      "name": "[variables('openAiServiceName')]",
      "location": "[parameters('location')]",
      "tags": "[variables('tags')]",
      "sku": {
        "name": "S0"
      },
      "kind": "OpenAI",
      "identity": {
        "type": "SystemAssigned"
      },
      "properties": {
        "customSubDomainName": "[variables('openAiServiceName')]",
        "publicNetworkAccess": "[if(parameters('enablePrivateEndpoints'), 'Disabled', 'Enabled')]",
        "networkAcls": {
          "defaultAction": "[if(parameters('enablePrivateEndpoints'), 'Deny', 'Allow')]"
        },
        "disableLocalAuth": true
      }
    },
    {
      "type": "Microsoft.Web/serverfarms",
      "apiVersion": "2021-02-01",
      "name": "[variables('appServicePlanName')]",
      "location": "[parameters('location')]",
      "tags": "[variables('tags')]",
      "sku": {
        "name": "P2v3",
        "tier": "PremiumV3",
        "capacity": 2
      },
      "kind": "linux",
      "properties": {
        "reserved": true,
        "zoneRedundant": true
      }
    },
    {
      "condition": "[parameters('enablePrivateEndpoints')]",
      "type": "Microsoft.Network/privateEndpoints",
      "apiVersion": "2021-02-01",
      "name": "[concat('pe-', variables('storageAccountName'))]",
      "location": "[parameters('location')]",
      "tags": "[variables('tags')]",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]",
        "[resourceId('Microsoft.Network/virtualNetworks', variables('virtualNetworkName'))]"
      ],
      "properties": {
        "subnet": {
          "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('virtualNetworkName'), variables('privateEndpointSubnetName'))]"
        },
        "privateLinkServiceConnections": [
          {
            "name": "storage-connection",
            "properties": {
              "privateLinkServiceId": "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]",
              "groupIds": [
                "blob"
              ]
            }
          }
        ]
      }
    },
    {
      "condition": "[parameters('enablePrivateEndpoints')]",
      "type": "Microsoft.Network/privateEndpoints",
      "apiVersion": "2021-02-01",
      "name": "[concat('pe-', variables('keyVaultName'))]",
      "location": "[parameters('location')]",
      "tags": "[variables('tags')]",
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]",
        "[resourceId('Microsoft.Network/virtualNetworks', variables('virtualNetworkName'))]"
      ],
      "properties": {
        "subnet": {
          "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('virtualNetworkName'), variables('privateEndpointSubnetName'))]"
        },
        "privateLinkServiceConnections": [
          {
            "name": "keyvault-connection",
            "properties": {
              "privateLinkServiceId": "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]",
              "groupIds": [
                "vault"
              ]
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.Authorization/roleAssignments",
      "apiVersion": "2020-04-01-preview",
      "name": "[guid(resourceGroup().id, parameters('principalId'), 'Storage Blob Data Contributor')]",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]"
      ],
      "properties": {
        "roleDefinitionId": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/ba92f5b4-2d11-453d-a403-e96b0029c9fe')]",
        "principalId": "[parameters('principalId')]",
        "principalType": "User"
      }
    },
    {
      "type": "Microsoft.Authorization/roleAssignments",
      "apiVersion": "2020-04-01-preview",
      "name": "[guid(resourceGroup().id, parameters('hipaaSecurityOfficerId'), 'Security Admin')]",
      "properties": {
        "roleDefinitionId": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/fb1c8493-542b-48eb-b624-b4c8fea62acd')]",
        "principalId": "[parameters('hipaaSecurityOfficerId')]",
        "principalType": "User"
      }
    }
  ],
  "outputs": {
    "resourceGroupName": {
      "type": "string",
      "value": "[resourceGroup().name]"
    },
    "virtualNetworkName": {
      "type": "string",
      "value": "[variables('virtualNetworkName')]"
    },
    "keyVaultName": {
      "type": "string",
      "value": "[variables('keyVaultName')]"
    },
    "keyVaultUri": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))).vaultUri]"
    },
    "storageAccountName": {
      "type": "string",
      "value": "[variables('storageAccountName')]"
    },
    "logAnalyticsWorkspaceId": {
      "type": "string",
      "value": "[resourceId('Microsoft.OperationalInsights/workspaces', variables('logAnalyticsWorkspaceName'))]"
    },
    "applicationInsightsConnectionString": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Insights/components', variables('applicationInsightsName'))).ConnectionString]"
    },
    "complianceStatus": {
      "type": "object",
      "value": {
        "hipaaCompliant": true,
        "encryption": {
          "atRest": "[parameters('enableCustomerManagedKeys')]",
          "inTransit": true
        },
        "networkIsolation": "[parameters('enablePrivateEndpoints')]",
        "auditLogging": true,
        "backupRetention": "[parameters('backupRetentionDays')]",
        "logRetention": "[parameters('logRetentionDays')]",
        "lastValidated": "2025-08-01"
      }
    }
  }
}